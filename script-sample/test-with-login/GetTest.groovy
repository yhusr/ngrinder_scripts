import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.plugin.http.HTTPRequest
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import java.util.Date
import java.util.List
import java.util.ArrayList

import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class GetTest {

    public static GTest test
    public static HTTPRequest request
    public static NVPair[] headers = []
    public static NVPair[] params = []
    public static Cookie[] cookies = []

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000

        //设置事务的名称（接口名称），以及1代表事务执行线程的顺序
        test = new GTest(1, "goods-interface")
        request = new HTTPRequest()
        grinder.logger.info("before process.");
    }
//每个线程执行之前执行
//cookie处理
    @BeforeThread
    public void beforeThread() {
        //注册事件，启动test，第二个参数要与@Test注解的方法保持一致
        //有多个请求/事务时，要注册多个事件
        test.record(this, "test")
        //配置延迟报告统计结果
        grinder.statistics.delayReports=true;
        grinder.logger.info("before thread.");
    }
    //在每个@Test注解方法执行之前执行
    @Before
    public void before() {
        request.setHeaders(headers)
        //设置本次请求的cookies
        cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
        grinder.logger.info("before thread. init headers and cookies");
    }
//在测试结束前不断的执行，各个@Test注解的方法异步执行
    @Test
    public void test(){
        HTTPResponse result = request.GET("http://192.168.31.250:8080/app/mobile/api/goods/gettypes?type=1", params)
        grinder.logger.info("返回的结果是：" + result.getText());
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.text,containsString("\"code\":0,\""));
            assertThat(result.statusCode, is(200));
        }
    }
}
