import HTTPClient.Cookie
import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import com.alibaba.fastjson.JSONObject
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import net.grinder.scriptengine.groovy.junit.annotation.RunRate
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.containsString
import static org.hamcrest.Matchers.is

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

import static org.junit.Assert.assertThat

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class LoginGoodsGroovy {

    public static GTest login
    public static GTest goods
    public static HTTPRequest request
    public static NVPair[] headers = []
    public static NVPair[] params = []
    public static Cookie[] cookies = []
    public static String body = "{\n\"mobile\":\"13528223194\",\n\"password\":\"123456\"\n}"
    public static String login_url = "http://192.168.31.250:8080/app/mobile/api/user/login"
    public static String get_url = "http://192.168.31.250:8080/app/mobile/api/goods/gettypes?type=1"
    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        login = new GTest(1,"用户登录")
        goods = new GTest(2, "获取商品列表")
        request = new HTTPRequest()
        List<NVPair> headerList = new ArrayList<NVPair>()
        headerList.add(new NVPair("Content-Type", "application/json"))
        headers = headerList.toArray()
        grinder.logger.info("before process.");
    }

    @BeforeThread
    public void beforeThread() {
        login.record(this, "loginGroovy")
        goods.record(this, "goodTypeGroovy")
        grinder.statistics.delayReports=true;
        grinder.logger.info("before thread.");
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
        grinder.logger.info("before thread. init headers and cookies");
    }
    @RunRate(60)
    @Test
    public void loginGroovy(){
        HTTPResponse result = request.POST(login_url, body.getBytes())
        grinder.logger.info("用户登录：" + result.getText())
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.getText(), containsString("\"code\":0"))
            assertThat(result.statusCode, is(200));
        }
    }
    @RunRate(40)
    @Test
    public void goodTypeGroovy(){
        HTTPResponse result = request.GET(get_url, params)
        grinder.logger.info("响应的结果是：" + result.getText())
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.getText(), containsString("\"code\":0"));
            assertThat(result.statusCode, is(200));
        }
    }
}

